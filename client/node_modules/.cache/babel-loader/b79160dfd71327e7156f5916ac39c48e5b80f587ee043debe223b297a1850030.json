{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\caries-detection-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [model, setModel] = useState(null);\n  const [prediction, setPrediction] = useState(null);\n  const loadModel = async () => {\n    const loadedModel = await tf.loadLayersModel('/model/model.json');\n    setModel(loadedModel);\n    alert('Model Loaded!');\n  };\n  const handleImageUpload = async event => {\n    const file = event.target.files[0];\n    const image = await readImage(file);\n    const tensor = tf.browser.fromPixels(image).resizeNearestNeighbor([255, 255, 3]) // Change to your model's input size\n    .expandDims().toFloat().div(tf.scalar(255));\n    const prediction = model.predict(tensor);\n    const predictionArray = await prediction.data();\n    setPrediction(Array.from(predictionArray));\n  };\n  const readImage = file => {\n    return new Promise(resolve => {\n      const img = new Image();\n      const reader = new FileReader();\n      reader.onload = () => {\n        img.src = reader.result;\n        img.onload = () => resolve(img);\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dental Caries Detection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), !model && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadModel,\n      children: \"Load Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 18\n    }, this), model && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Prediction: \", prediction.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Ykc7LQGourt6xXD2hNILM5ysMVs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","tf","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","model","setModel","prediction","setPrediction","loadModel","loadedModel","loadLayersModel","alert","handleImageUpload","event","file","target","files","image","readImage","tensor","browser","fromPixels","resizeNearestNeighbor","expandDims","toFloat","div","scalar","predict","predictionArray","data","Array","from","Promise","resolve","img","Image","reader","FileReader","onload","src","result","readAsDataURL","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","accept","onChange","join","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/caries-detection-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction App() {\n  const [model, setModel] = useState(null);\n  const [prediction, setPrediction] = useState(null);\n\n  const loadModel = async () => {\n    const loadedModel = await tf.loadLayersModel('/model/model.json');\n    setModel(loadedModel);\n    alert('Model Loaded!');\n  };\n\n  const handleImageUpload = async (event) => {\n    const file = event.target.files[0];\n    const image = await readImage(file);\n\n    const tensor = tf.browser.fromPixels(image)\n      .resizeNearestNeighbor([255,255,3])  // Change to your model's input size\n      .expandDims()\n      .toFloat()\n      .div(tf.scalar(255));\n\n    const prediction = model.predict(tensor);\n    const predictionArray = await prediction.data();\n\n    setPrediction(Array.from(predictionArray));\n  };\n\n  const readImage = (file) => {\n    return new Promise((resolve) => {\n      const img = new Image();\n      const reader = new FileReader();\n      reader.onload = () => {\n        img.src = reader.result;\n        img.onload = () => resolve(img);\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  return (\n    <div style={{ textAlign: 'center', padding: '20px' }}>\n      <h1>Dental Caries Detection</h1>\n\n      {!model && <button onClick={loadModel}>Load Model</button>}\n\n      {model && (\n        <>\n          <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n          {prediction && <div>Prediction: {prediction.join(', ')}</div>}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}